local constants = require("main/scripts/constants")
local playerinput = require("main/scripts/playerinput")
local screenfade = require("main/scripts/screenfade")
local waypoint = require("main/scripts/waypoint")
local util = require("main/scripts/util")
local debugutil = require("main/scripts/debugutil")
local trainer = require("main/scripts/trainer")
local render_helper = require("main/scripts/render_helper")

local players = {}

local function reset_waypoints(self, waypoints)
    if self.trainer == 1 then
        trainer.print_wps(trainer.trainer_waypoint_reached, waypoints)
    end
    
    waypoint.set_waypoints(waypoints)
end

function init(self)
    msg.post(".", "acquire_input_focus")
    msg.post("/common/camera#camera", "acquire_camera_focus")
        
    self.pause = false
    self.debug = true
    self.trainer = tonumber(sys.get_config('trainer.enable', 0))

	playerinput.setup()
	
    table.insert(players, go.get_id("/player1"))
    table.insert(players, go.get_id("/player2"))
    table.insert(players, go.get_id("/player3"))
    table.insert(players, go.get_id("/player4"))
    
    self.display_width = sys.get_config("display.width")
    self.display_height = sys.get_config("display.height")
    
    --screenfade.do_screen_fade_in(self.display_width, self.display_height, go.get_position(players[1]))
	msg.post("@render:", "disable_stencil_mask")
	
	local pos = go.get_position("waypointstart")
	local tile_pos_x, tile_pos_y = util.screen_to_coords(pos.x, pos.y)
	self.waypoints = waypoint.find_route("#tilemap", "waypoints", {tile_pos_x+1, tile_pos_y+1}, {0, 1})
	
    local waypoints = nil
    
    local levelname = sys.get_config('trainer.level', 'level01')
    levelname = "main/levels/" .. levelname .. ".wp.json"
    waypoints = waypoint.load_waypoints(levelname)
    
    if self.trainer == 1 then
        if waypoints ~= nil then
	        trainer_segments_visited = #waypoints
	        trainer.trainer_waypoint_reached = #waypoints
	    end
    end
    
    if waypoints == nil then
        waypoints = {}
	    -- add pos, offset and speed
		for _,wp in ipairs(self.waypoints) do
			table.insert(waypoints, { pos = util.coords_to_screen_vector(wp[1]-1, wp[2]-1), offset = vmath.vector3(0,0,0), speed = 0 } )
		end

		trainer.waypoints_setup(waypoints)
    end
    self.waypoints = waypoints
    
    trainer.trainer_waypoints = util.deepcopy(self.waypoints)
    reset_waypoints(self, trainer.trainer_waypoints)
	
	for k, player in pairs(players) do
	   msg.post(player, constants.LEVEL_MESSAGE_INIT)
	end

	if self.trainer == 1 then
	   self.start_position = go.get_position(players[1])
	   self.start_rotation = go.get_rotation(players[1])
	   
	   trainer.trainer_best_run_data = trainer.load_data("main/levels/trainerrun.json")
	   
	   go.delete(players[2])
       go.delete(players[3])
       go.delete(players[4])
       players[2] = nil
       players[3] = nil
       players[4] = nil
	end
end

function final(self)
	msg.post(".", "release_input_focus")
end

local function reset_level(self, maxspeed)
    if self.trainer == 1 then
        trainer_current_time = 0
        
        -- change the track
        trainer.trainer_waypoints = util.deepcopy(self.waypoints)
        trainer.modify_waypoints(trainer.trainer_waypoints, maxspeed)
        reset_waypoints(self, trainer.trainer_waypoints)
        
        -- reset the players
        go.set_position(self.start_position, players[1])
        go.set_rotation(self.start_rotation, players[1])
        msg.post(players[1], constants.PLAYER_MESSAGE_RESET, {})
        msg.post(players[1], constants.LEVEL_MESSAGE_INIT, {})
    end
end




function render_waypoints(waypoints)
    for i = 1, #waypoints do
        local wp1 = waypoints[i]
        local wp2 = waypoints[i % #waypoints + 1]
        local color = i / #waypoints
        msg.post("@render:", "draw_line", {start_point = wp1.pos, end_point = wp2.pos, color = vmath.vector4(color, color,1,1)})
        
        if wp1.offset ~= nil then
            msg.post("@render:", "draw_line", {start_point = wp1.pos, end_point = wp1.pos + wp1.offset, color = vmath.vector4(1,1,1,1)})
        end
    end
end

function update(self, dt)
	if self.debug then
	   render_waypoints(self.waypoints)
    end
    
    if self.trainer == 1 then
        if not self.pause then        
            trainer.update(dt)
        end
        trainer.render_trainer_data(trainer.trainer_best_run_data)
    end
end


function on_message(self, message_id, message, sender)
    if message_id == constants.RECORD_MESSAGE_PLAYER_POSITION then
        if self.trainer == 1 then
	        table.insert(trainer.trainer_current_run, message)
	    end
	elseif message_id == constants.LEVEL_MESSAGE_LAP_FINISHED then

        -- If all players have finished, and the timer has run out
        if self.trainer == 1 then
            trainer.trainer_run_count = trainer.trainer_run_count + 1
            
            trainer.trainer_waypoint_reached = #trainer.trainer_waypoints
            trainer_segments_visited = #self.waypoints
            
            if message.lap_time < trainer_best_run_time then
                trainer_best_run = trainer.trainer_run_count
                trainer_best_run_time = message.lap_time
                trainer.trainer_best_run_data = trainer.trainer_current_run
                self.waypoints = util.deepcopy(trainer.trainer_waypoints)
                
                print("New best lap found. Using as seed:")
                print_wps(trainer.trainer_waypoint_reached, self.waypoints)
                print("<- -")
                
                local levelname = sys.get_config('trainer.level', 'level01')
                levelname = "main/levels/" .. levelname .. ".wp.json"
                waypoint.save_waypoints(levelname, trainer.trainer_waypoints)
                
                print("trainer_segments_visited", trainer_segments_visited)
        
            end
            
            trainer.trainer_current_run = {}
            
            print("TRAINER RUN", trainer.trainer_run_count, "BEST:", trainer_best_run_time, trainer_best_run)
            
            reset_level(self, 0)
        end
    elseif message_id == constants.TRAINER_MESSAGE_FAILED then
        if self.trainer == 1 then
	        trainer.trainer_run_count = trainer.trainer_run_count + 1
	        print(string.format("TRAINER RUN (failed) %d, %s, t: %f, wp: %d, spd: %f", trainer.trainer_run_count, message.reason, message.time, message.waypoint, message.speed))
	        
	        print("trainer_segments_visited", trainer_segments_visited)
	        print("message.numsegments", message.numsegments)
	        
	        if message.numsegments >= trainer_segments_visited then
	        
	            print("trainer.trainer_waypoint_reached", message.waypoint)
	            
	            trainer_segments_visited = message.numsegments
	            trainer.trainer_waypoint_reached = message.waypoint
	
	            trainer.trainer_best_run_data = trainer.trainer_current_run
	        
	            self.waypoints = util.deepcopy(trainer.trainer_waypoints)
	            
	            print("Reached further than before (" .. tostring(trainer.trainer_waypoint_reached) .. "  segs: " .. tostring(message.numsegments) .."). Using as seed")
	            
		        levelname = "main/levels/trainerrun.json"
		        trainer.save_data(levelname, trainer.trainer_current_run)
		        
	        else
	            --
	        end
	        trainer.trainer_current_run = {}
	        
	        reset_level(self, message.speed)
	    end
    end
end

function on_input(self, action_id, action)
	local playerid = 1
	playerinput.on_input(playerid, players[playerid], action_id, action)
	
	if action_id == constants.INPUT_ACTION_PAUSE and action.pressed then
        self.pause = not self.pause
        
        for k, player in pairs(players) do
            msg.post(player, constants.PLAYER_MESSAGE_PAUSE, action)
        end
    end
	
	debugutil.on_input(self, action_id, action)
end
