local constants = require("main/scripts/constants")
local NUM_DIRECTIONS = 64
local SPRITE_ROTATION = 16 -- since the sprite is directed in positive y, and not positive x

go.property("debug", false)

local function angle_to_rad(angle)
	return (2.0 * math.pi * angle) / NUM_DIRECTIONS
end
local function rad_to_angle(rad)
	return math.floor((rad * NUM_DIRECTIONS) / (2.0 * math.pi))
end
local function get_direction_from_angle(angle)
	local rad = angle_to_rad(angle)
	return vmath.vector3(math.cos(rad), math.sin(rad), 0)
end
local function get_direction_from_rad(rad)
	return vmath.vector3(math.cos(rad), math.sin(rad), 0)
end


function init(self)
	-- car properties
	self.traction = 1.0
	self.acceleration_multiplier = 1.0
	self.brake_multiplier = 1.0
	self.brakes = 2.0
	self.maxspeed = 150.0
	-- 
    self.speed = 0.0
    self.acceleration = 20
    self.brakes = 15
    self.enginebrake = 0.975
    self.turnspeed = math.pi -- rad /seconds
    self.turndirection = 0
    
    self.angle = SPRITE_ROTATION
    self.radangle = angle_to_rad(self.angle)
    self.direction = get_direction_from_angle(self.angle)
    self.position = go.get_position(".")
    
    self.debug = true
end


function round(x)
  return x>=0 and math.floor(x+0.5) or math.ceil(x-0.5)
end

function update(self, dt)

	-- POSITION
	self.position = self.position + self.speed * dt * self.direction
	-- make sure we're aligned to pixels, for the tiles not to get messed up
	local visual_position = vmath.vector3(round(self.position.x), round(self.position.y), self.position.z)
	--local visual_position = self.position
	go.set_position(visual_position, ".")
	
	-- CAMERA
	local display_width = 800
	local display_height = 600
	local camerapos = visual_position - vmath.vector3(display_width/4, display_height/4, 0)
	go.set_position(camerapos, "/camera")
	
	self.speed = self.speed * self.enginebrake
	if self.speed > self.maxspeed then
		self.speed = self.maxspeed
	elseif self.speed < self.maxspeed * -0.5 then
		self.speed = self.maxspeed * -0.5
	elseif math.abs(self.speed) < 0.095 then
		self.speed = 0
	end
	
	-- ROTATION
	if self.turndirection then
    	if self.speed > 0 then
			self.radangle = self.radangle + self.turndirection * self.turnspeed * dt
		else
			self.radangle = self.radangle + -1 * self.turndirection * self.turnspeed * dt
		end
		self.radangle = self.radangle % (2.0 * math.pi) 
		self.angle = rad_to_angle(self.radangle)
		
    	self.direction = get_direction_from_angle(self.angle)
    	--self.direction = get_direction_from_rad(self.radangle)
    	go.set_rotation( vmath.quat_rotation_z( angle_to_rad(self.angle-SPRITE_ROTATION) ), ".")
    	--go.set_rotation( vmath.quat_rotation_z( self.radangle - math.pi*0.5, ".") )
	end
	self.turndirection = 0
	
    if self.debug then
       -- msg.post("@render:", "draw_line", {start_point = self.position, end_point = self.position + self.direction * self.speed, color = vmath.vector4(1,1,1,1)})
    end
end

function on_message(self, message_id, message, sender)
    -- By sending input here, we're delaying it 1 frame
    -- But it's not that important for this game
    
    if message_id == constants.PLAYER_MESSAGE_ACCELERATE then    
    	self.speed = self.speed + self.acceleration * self.acceleration_multiplier
    elseif message_id == constants.PLAYER_MESSAGE_BRAKE then
    	self.speed = self.speed - self.brakes * self.brake_multiplier
    elseif message_id == constants.PLAYER_MESSAGE_LEFT then
    	self.turndirection = 1
    elseif message_id == constants.PLAYER_MESSAGE_RIGHT then
    	self.turndirection = -1
    else
    	print("message_id " .. tostring(message_id))
		pprint(message)
		pprint(sender)

    end
end
