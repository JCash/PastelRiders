local autonomous = require("main/scripts/autonomous")
local constants = require("main/scripts/constants")
local util = require("main/scripts/util")
local waypoint = require("main/scripts/waypoint")
local render_helper = require("main/scripts/render_helper")

local SPRITE_ROTATION = 16 -- since the sprite is directed in positive y, and not positive x

go.property("ai", false)
go.property("debug", false)
go.property("playerid", 1)



function init(self)
    reset(self)
end

function reset(self)
    self.initialized = 0
    
    -- car properties
    self.traction = 1.0
    self.acceleration_multiplier = 1.0
    self.brake_multiplier = 1.0
    self.brakes = 2.0
    self.maxspeed = 250 --150.0
    -- 
    self.speed = 0.0
    self.acceleration = 20
    self.brakes = 15
    self.enginebrake = 0.975
    self.turnspeed = math.pi -- rad /seconds
    self.turndirection = 0
    
    self.touching = {}
    self.tumble_timer = 0 
    self.tumble_direction = 0 
    
    self.angle = SPRITE_ROTATION
    self.radangle = util.angle_to_rad(self.angle)
    self.direction = util.get_direction_from_angle(self.angle)
    self.position = go.get_position(".")
    
    self.debug = true
    
    self.vehicle = autonomous.create({position = self.position, maxspeed = self.maxspeed, radius = 32})
    self.lap = -1
    self.lap_time = 0
    self.total_time = 0
    
    self.waypointindex = 0
    
    self.record_tick = 0
    
    self.disabled = false
end

function update_ai(self, dt)
    if self.disabled then
        return
    end

	-- UPDATE
	self.vehicle.pause = self.pause
	local valid_update = autonomous.update(self.vehicle, dt)
	if not valid_update then
        --sprite.set_constant("#sprite", "tint", vmath.vector4(0.5,0,0,1))
        local wpindex = self.vehicle.waypointindexprev
        if wpindex > self.vehicle.waypointindex then
        	wpindex = 1
        end
        msg.post("/level#script", constants.TRAINER_MESSAGE_FAILED, { reason = "Invalid position", waypoint = wpindex, time = self.lap_time, speed = vmath.length(self.vehicle.velocity) })
        self.disabled = true
        return
	end
	
	go.set_position(self.vehicle.position, ".")
	self.position = self.vehicle.position
	
	
	-- ROTATION
	self.direction = self.vehicle.direction
	local dir_y = vmath.vector3(0,1,0)
	local rotation = nil
	if vmath.dot(dir_y, self.direction) > -0.999 then
		rotation = vmath.quat_from_to(vmath.vector3(0,1,0), vmath.normalize(self.direction))
	else
		rotation = vmath.quat_rotation_z(math.pi)
	end
	go.set_rotation(rotation, ".")	
	
	-- DEBUG
	if self.debug then
		autonomous.debug(self.vehicle)
	end
	
	self.record_tick = (self.record_tick % 10) + 1
	if self.record_tick == 1 then
	   msg.post("/level#script", constants.RECORD_MESSAGE_PLAYER_POSITION, {
	       playerid = self.playerid,
	       position = self.vehicle.position,
	       direction = self.vehicle.direction,
           velocity = self.vehicle.velocity,
	   })
	end
end

function update_player(self, dt)

	-- TUMBLING
	if self.tumble_timer == 0 and self.turndirection ~= 0 then
		local message = self.touching[constants.PHYSICS_GROUP_OIL]
		if message ~= nil then
			self.tumble_timer = constants.TIMER_TUMBLE
			self.tumble_direction = self.turndirection
		end
	end

	-- POSITION
	self.position = self.position + self.speed * dt * self.direction
	local visual_position = self.position
	go.set_position(visual_position, ".")
	
	-- SPEED
	if self.tumble_timer == 0 then 
		self.speed = self.speed * self.enginebrake
	end
	if self.speed > self.maxspeed then
		self.speed = self.maxspeed
	elseif self.speed < self.maxspeed * -0.5 then
		self.speed = self.maxspeed * -0.5
	elseif math.abs(self.speed) < 0.095 then
		self.speed = 0
	end
		
	-- ROTATION
	if self.tumble_timer > 0 then
		local unit = self.tumble_timer / constants.TIMER_TUMBLE
		self.tumble_timer = self.tumble_timer - dt
		if self.tumble_timer < 0 then
			self.tumble_timer = 0
			self.tumble_direction = 0
		end
		go.set_rotation( vmath.quat_rotation_z( self.radangle - math.pi/2 + -self.tumble_direction * unit * (math.pi*2) ), ".")
	elseif self.turndirection ~= 0 then
    	if self.speed >= 0 then
			self.radangle = self.radangle + self.turndirection * self.turnspeed * dt
		else
			self.radangle = self.radangle + -1 * self.turndirection * self.turnspeed * dt
		end
		self.radangle = self.radangle % (2.0 * math.pi) 
		self.angle = util.rad_to_angle(self.radangle)
		
    	self.direction = util.get_direction_from_angle(self.angle)
    	--self.direction = util.get_direction_from_rad(self.radangle)
    	go.set_rotation( vmath.quat_rotation_z( util.angle_to_rad(self.angle-SPRITE_ROTATION) ), ".")
    	--go.set_rotation( vmath.quat_rotation_z( self.radangle - math.pi*0.5, ".") )
	end
	
	self.turndirection = 0
	self.touching = {}
	
    if self.debug then
       -- msg.post("@render:", "draw_line", {start_point = self.position, end_point = self.position + self.direction * self.speed, color = vmath.vector4(1,1,1,1)})
       --msg.post("@render:", "draw_line", {start_point = self.rc_from, end_point = self.rc_to, color = vmath.vector4(1,1,1,1)})
       --msg.post("@render:", "draw_line", {start_point = self.rc_hit, end_point = self.rc_hit + self.rc_normal * 64, color = vmath.vector4(0,1,1,1)})
    end
    
    --self.rc_from = self.position + vmath.vector3(64, 0, 0)
    --self.rc_to = self.position
    --physics.ray_cast(self.rc_from, self.rc_to, { hash("track") } )
end

function update(self, dt)
    if not self.initialized then
        return
    end
    
	--update_player(self, dt)
	update_ai(self, dt)
	
	-- CAMERA
	local camerapos = self.position - vmath.vector3(render_helper.width/2, render_helper.height/2, 0)
	go.set_position(camerapos, "/common/camera#camera")
	
	if not self.vehicle.pause then
		self.lap_time = self.lap_time + dt
		self.total_time = self.total_time + dt
		local speed = vmath.length(self.vehicle.velocity)
		msg.post("/common/common#gui", constants.LEVEL_MESSAGE_PLAYER_TIME, { playerid = self.playerid, lap = self.lap, lap_time = self.lap_time, total_time = self.total_time, speed = speed } )
	end
end

function on_message(self, message_id, message, sender)

    if message_id == constants.PLAYER_MESSAGE_RESET then
        reset(self)
    end

    if message_id == hash("ray_cast_response") then 
        return
    end
    
	if message_id == constants.PLAYER_MESSAGE_PAUSE and message.pressed then
    	self.pause = not self.pause
    end
    if message_id == constants.PLAYER_MESSAGE_ACCELERATE then    
    	self.speed = self.speed + self.acceleration * self.acceleration_multiplier
    elseif message_id == constants.PLAYER_MESSAGE_BRAKE then
    	self.speed = self.speed - self.brakes * self.brake_multiplier
    elseif message_id == constants.PLAYER_MESSAGE_LEFT then
    	self.turndirection = 1
    elseif message_id == constants.PLAYER_MESSAGE_RIGHT then
    	self.turndirection = -1
    elseif message_id == constants.PHYSICS_MESSAGE_CONTACT then 
        --print("Message " .. tostring(message_id))
        if message.group == constants.PHYSICS_GROUP_OIL then
        	self.touching[constants.PHYSICS_GROUP_OIL] = message
        elseif message.group == constants.PHYSICS_GROUP_TRACK then
        	--print("Message " .. tostring(message_id))
        	--pprint(message)
        end
    elseif message_id == constants.PHYSICS_MESSAGE_TRIGGER and message.enter then
        if message.group == constants.PHYSICS_GROUP_FINISH then
        	self.lap = self.lap + 1
        	if self.lap > 0 then
	        	print("LAP " .. tostring(self.lap), util.format_time(self.lap_time))
	            msg.post("/common/common#gui", constants.LEVEL_MESSAGE_LAP_TIME, { playerid = self.playerid, lap = self.lap, lap_time = self.lap_time } )
                msg.post("/level#script", constants.LEVEL_MESSAGE_LAP_FINISHED, { playerid = self.playerid, lap = self.lap, lap_time = self.lap_time } )
	            self.lap_time = 0
	        end
        end
    elseif message_id == constants.LEVEL_MESSAGE_INIT then
    	   autonomous.init(self.vehicle, waypoint.get_waypoints(), 1)
    	   self.initialized = 1
    end
end
